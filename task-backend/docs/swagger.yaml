openapi: 3.0.3
info:
  title: Task Management API
  description: |
    Task Management System API dengan fitur:
    - Multi-user (User & Admin roles)
    - CRUD operations untuk tasks
    - JWT Authentication (Access & Refresh Token)
    - OAuth integration (Google/GitHub)
    - RESTful API design
  version: 1.0.0
  contact:
    name: API Support
    email: support@taskmanager.com

servers:
  - url: http://localhost:8080/api/v1
    description: Development server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "user@example.com"
        name:
          type: string
          example: "John Doe"
        role:
          type: string
          enum: [user, admin]
          example: "user"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Task:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        title:
          type: string
          example: "Complete project documentation"
          maxLength: 255
        description:
          type: string
          example: "Write comprehensive documentation for the project"
        status:
          type: string
          enum: [pending, in_progress, completed]
          example: "pending"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "password123"
          minLength: 6

    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: "John Doe"
          minLength: 2
          maxLength: 100
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          example: "password123"
          minLength: 6

    CreateTaskRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          example: "Complete project documentation"
          maxLength: 255
        description:
          type: string
          example: "Write comprehensive documentation for the project"
        status:
          type: string
          enum: [pending, in_progress, completed]
          default: "pending"

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          example: "Updated project documentation"
          maxLength: 255
        description:
          type: string
          example: "Updated description"
        status:
          type: string
          enum: [pending, in_progress, completed]

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          $ref: '#/components/schemas/User'

    TasksResponse:
      type: object
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        total:
          type: integer
          example: 10
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 10

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Invalid credentials"
        message:
          type: string
          example: "Email or password is incorrect"

    ValidationErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Validation failed"
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "email"
              message:
                type: string
                example: "Email is required"

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register pengguna baru
      description: Mendaftarkan pengguna baru ke sistem
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registrasi berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          headers:
            Set-Cookie:
              description: HTTP-only secure cookie berisi refresh token
              schema:
                type: string
                example: "refresh_token=eyJ...; HttpOnly; Secure; SameSite=Strict"
        '400':
          description: Data tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '409':
          description: Email sudah digunakan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login pengguna
      description: Autentikasi pengguna dengan email dan password
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
          headers:
            Set-Cookie:
              description: HTTP-only secure cookie berisi refresh token
              schema:
                type: string
        '400':
          description: Data tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Kredensial tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Mendapatkan access token baru menggunakan refresh token dari cookie
      security: []
      responses:
        '200':
          description: Token berhasil di-refresh
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
        '401':
          description: Refresh token tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout pengguna
      description: Logout dan hapus refresh token
      responses:
        '200':
          description: Logout berhasil
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logout successful"
          headers:
            Set-Cookie:
              description: Clear refresh token cookie
              schema:
                type: string

  # OAuth Endpoints
  /auth/oauth/google:
    get:
      tags:
        - OAuth
      summary: Google OAuth login
      description: Redirect ke Google OAuth untuk authentication
      security: []
      responses:
        '302':
          description: Redirect ke Google OAuth

  /auth/oauth/google/callback:
    get:
      tags:
        - OAuth
      summary: Google OAuth callback
      description: Callback dari Google OAuth
      security: []
      parameters:
        - name: code
          in: query
          required: true
          schema:
            type: string
        - name: state
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OAuth login berhasil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: OAuth callback error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # User Profile
  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get user profile
      description: Mendapatkan informasi profile pengguna yang sedang login
      responses:
        '200':
          description: Profile berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Token tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Tasks Management
  /tasks:
    get:
      tags:
        - Tasks
      summary: Get all tasks
      description: |
        Mendapatkan semua tasks:
        - User: hanya tasks milik sendiri
        - Admin: semua tasks
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, in_progress, completed]
        - name: search
          in: query
          schema:
            type: string
            description: Search dalam title dan description
      responses:
        '200':
          description: Tasks berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksResponse'
        '401':
          description: Token tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Tasks
      summary: Create new task
      description: Membuat task baru
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task berhasil dibuat
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Data tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Token tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get task by ID
      description: |
        Mendapatkan task berdasarkan ID:
        - User: hanya task milik sendiri
        - Admin: semua tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task berhasil diambil
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '401':
          description: Token tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Akses ditolak
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Tasks
      summary: Update task
      description: |
        Update task berdasarkan ID:
        - User: hanya task milik sendiri
        - Admin: semua tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
      responses:
        '200':
          description: Task berhasil diupdate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Data tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          description: Token tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Akses ditolak
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Tasks
      summary: Delete task
      description: |
        Hapus task berdasarkan ID:
        - User: hanya task milik sendiri
        - Admin: semua tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Task berhasil dihapus
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Task deleted successfully"
        '401':
          description: Token tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Akses ditolak
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task tidak ditemukan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Admin Only Endpoints
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users (Admin only)
      description: Mendapatkan semua users - hanya untuk admin
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Users berhasil diambil
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                  page:
                    type: integer
                  limit:
                    type: integer
        '401':
          description: Token tidak valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Akses ditolak - hanya admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Authentication
    description: Endpoints untuk autentikasi dan autorisasi
  - name: OAuth
    description: Endpoints untuk OAuth integration
  - name: Tasks
    description: Endpoints untuk manajemen tasks
  - name: Admin
    description: Endpoints khusus admin